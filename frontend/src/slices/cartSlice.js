import { createSlice } from "@reduxjs/toolkit";
import { updateCart } from "../utils/cartUtils";

// Initialize the initial state of the cart from local storage or create an empty cart if not found.So for the initial state, items are going to be stored in local storage so that when we leave the site, we come back, our items are still in the cart.
const initialState = localStorage.getItem("cart")
  ? JSON.parse(localStorage.getItem("cart"))
  : { cartItems: [], shippingAddress: {}, paymentMethod: "PayPal" };

// Define the cartSlice using createSlice
const cartSlice = createSlice({
  name: "cart",
  initialState,
  // in reducer goes all functions that have to do with cart
  reducers: {
    // ====ADD:Define reducer functions for adding items to the cart
    addToCart: (state, action) => {
      //state=current state
      //action= is including data inside the payload
      const item = action.payload;
      //checking if the item exist in the cart already
      const existItem = state.cartItems.find((x) => x._id === item._id);
      //update quantity if the item exists in the cart already
      if (existItem) {
        state.cartItems = state.cartItems.map((y) =>
          y._id === existItem._id ? item : y
        );
      } else {
        //add a new item to the cart if it doesn't exist
        state.cartItems = [...state.cartItems, item];
      }
      return updateCart(state);
    },

    // ====REMOVE:Define reducer functions for removing items to the cart
    removeFromCart: (state, action) => {
      // Remove the item with the specified _id from the cartItems array;
      //id is in action.payload
      state.cartItems = state.cartItems.filter((x) => x._id !== action.payload);
      // Call the updateCart function to update the cart in local storage and return the updated state
      return updateCart(state);
    },
    //====This reducer case is responsible for updating the shippingAddress property in the cart state with the payload received from the action.
    saveShippingAddress: (state, action) => {
      state.shippingAddress = action.payload;
      return updateCart(state);
    },
  },
});
// Export the action creators for addToCart and removeFromCart
export const { addToCart, removeFromCart, saveShippingAddress } =
  cartSlice.actions;

// Export the reducer function generated by createSlice
export default cartSlice.reducer;
